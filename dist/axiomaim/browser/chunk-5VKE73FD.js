import{d as u,f as l}from"./chunk-YCUPTL4E.js";import{g}from"./chunk-25LMPTPI.js";import{Y as h,ca as s,fa as b,g as m,h as p,ia as o,r as c}from"./chunk-Q34RPHHW.js";var v=new b("AXIOMAIM_APP_CONFIG");var I=(()=>{class e{constructor(){this._config=new m(o(v))}set config(t){let i=l({},this._config.getValue(),t);this._config.next(i)}get config$(){return this._config.asObservable()}reset(){this._config.next(this.config)}static{this.\u0275fac=function(i){return new(i||e)}}static{this.\u0275prov=s({token:e,factory:e.\u0275fac,providedIn:"root"})}}return e})();var V=(()=>{class e{constructor(){this._breakpointObserver=o(g),this._axiomaimConfigService=o(I),this._onMediaChange=new p(1),this._axiomaimConfigService.config$.pipe(c(t=>u(Object.entries(t.screens).map(([i,n])=>[i,`(min-width: ${n})`]))),h(t=>this._breakpointObserver.observe(Object.values(t)).pipe(c(i=>{let n=[],f={},O=Object.entries(i.breakpoints).filter(([a,r])=>r)??[];for(let[a]of O){let r=Object.entries(t).find(([j,x])=>x===a)[0];r&&(n.push(r),f[r]=a)}this._onMediaChange.next({matchingAliases:n,matchingQueries:f})})))).subscribe()}get onMediaChange$(){return this._onMediaChange.asObservable()}onMediaQueryChange$(t){return this._breakpointObserver.observe(t)}static{this.\u0275fac=function(i){return new(i||e)}}static{this.\u0275prov=s({token:e,factory:e.\u0275fac,providedIn:"root"})}}return e})();export{v as a,I as b,V as c};
