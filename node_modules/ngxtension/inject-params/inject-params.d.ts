import { type Signal } from '@angular/core';
import { type Params } from '@angular/router';
import { DefaultValueOptions, InjectorOptions, ParseOptions } from 'ngxtension/shared';
type ParamsTransformFn<ReadT> = (params: Params) => ReadT;
/**
 * The `ParamsOptions` type defines options for configuring the behavior of the `injectParams` function.
 *
 * @template ReadT - The expected type of the read value.
 * @template WriteT - The type of the value to be written.
 * @template DefaultValueT - The type of the default value.
 */
export type ParamsOptions<ReadT, WriteT, DefaultValueT> = ParseOptions<ReadT, WriteT> & DefaultValueOptions<DefaultValueT> & InjectorOptions;
/**
 * The `injectParams` function allows you to access and manipulate parameters from the current route.
 *
 * @returns A `Signal` that emits the entire parameters object.
 */
export declare function injectParams(): Signal<Params>;
/**
 * The `injectParams` function allows you to access and manipulate parameters from the current route.
 *
 * @param {string} key - The name of the parameter to retrieve.
 * @returns {Signal} A `Signal` that emits the value of the specified parameter, or `null` if it's not present.
 */
export declare function injectParams(key: string): Signal<string | null>;
/**
 * The `injectParams` function allows you to access and manipulate parameters from the current route.
 *
 * @param {string} key - The name of the parameter to retrieve.
 * @param {ParamsOptions} options - Optional configuration options for the parameter.
 * @returns {Signal} A `Signal` that emits the transformed value of the specified parameter, or `null` if it's not present.
 */
export declare function injectParams<ReadT>(key?: string, options?: ParamsOptions<ReadT, string, ReadT>): Signal<ReadT | null>;
/**
 * The `injectParams` function allows you to access and manipulate parameters from the current route.
 * It retrieves the value of a parameter based on a custom transform function applied to the parameters object.
 *
 * @template ReadT - The expected type of the read value.
 * @param {ParamsTransformFn<ReadT>} fn - A transform function that takes the parameters object (`params: Params`) and returns the desired value.
 * @returns {Signal} A `Signal` that emits the transformed value based on the provided custom transform function.
 *
 * @example
 * const searchValue = injectParams((params) => params['search'] as string);
 */
export declare function injectParams<ReadT>(fn: ParamsTransformFn<ReadT>): Signal<ReadT>;
export {};
