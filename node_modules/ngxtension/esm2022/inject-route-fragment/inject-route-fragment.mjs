import { inject } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ActivatedRoute } from '@angular/router';
import { assertInjector } from 'ngxtension/assert-injector';
import { map } from 'rxjs';
export function injectRouteFragment(options) {
    return assertInjector(injectRouteFragment, options?.injector, () => {
        const route = inject(ActivatedRoute);
        const initialRouteFragment = route.snapshot.fragment;
        const getFragment = (fragment) => {
            if (fragment === null && options?.defaultValue) {
                return options.defaultValue;
            }
            if (options?.parse) {
                return options.parse(fragment);
            }
            if (options?.transform) {
                return options.transform(fragment);
            }
            return fragment;
        };
        const fragment$ = route.fragment.pipe(map(getFragment));
        return toSignal(fragment$, {
            initialValue: getFragment(initialRouteFragment),
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LXJvdXRlLWZyYWdtZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2luamVjdC1yb3V0ZS1mcmFnbWVudC9zcmMvaW5qZWN0LXJvdXRlLWZyYWdtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFNNUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQXdDM0IsTUFBTSxVQUFVLG1CQUFtQixDQUNsQyxPQUF1QztJQUV2QyxPQUFPLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUNsRSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckMsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNyRCxNQUFNLFdBQVcsR0FBRyxDQUFDLFFBQXVCLEVBQUUsRUFBRTtZQUMvQyxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO2dCQUNoRCxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUM7WUFDN0IsQ0FBQztZQUNELElBQUksT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNwQixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEMsQ0FBQztZQUNELElBQUksT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDO2dCQUN4QixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEMsQ0FBQztZQUVELE9BQU8sUUFBUSxDQUFDO1FBQ2pCLENBQUMsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRXhELE9BQU8sUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUMxQixZQUFZLEVBQUUsV0FBVyxDQUFDLG9CQUFvQixDQUFDO1NBQy9DLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgdHlwZSBTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRvU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgYXNzZXJ0SW5qZWN0b3IgfSBmcm9tICduZ3h0ZW5zaW9uL2Fzc2VydC1pbmplY3Rvcic7XG5pbXBvcnQge1xuXHREZWZhdWx0VmFsdWVPcHRpb25zLFxuXHRJbmplY3Rvck9wdGlvbnMsXG5cdFBhcnNlT3B0aW9ucyxcbn0gZnJvbSAnbmd4dGVuc2lvbi9zaGFyZWQnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogVGhlIGBJbmplY3RSb3V0ZUZyYWdtZW50T3B0aW9uc2AgdHlwZSBkZWZpbmVzIG9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBiZWhhdmlvciBvZiB0aGUgYGluamVjdFJvdXRlRnJhZ21lbnRgIGZ1bmN0aW9uLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIGV4cGVjdGVkIHR5cGUgb2YgdGhlIHJlYWQgdmFsdWUuXG4gKi9cbmV4cG9ydCB0eXBlIEluamVjdFJvdXRlRnJhZ21lbnRPcHRpb25zPFQgPSB1bmtub3duPiA9IFBhcnNlT3B0aW9uczxcblx0VCxcblx0c3RyaW5nIHwgbnVsbFxuPiAmXG5cdEluamVjdG9yT3B0aW9ucyAmXG5cdERlZmF1bHRWYWx1ZU9wdGlvbnM8VD4gJiB7XG5cdFx0LyoqXG5cdFx0ICogQSB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbiB0byBjb252ZXJ0IHRoZSB3cml0dGVuIHZhbHVlIHRvIHRoZSBleHBlY3RlZCByZWFkIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQGRlcHJlY2F0ZWQgVXNlIGBwYXJzZWAgYXMgYSByZXBsYWNlbWVudC5cblx0XHQgKiBAcGFyYW0gdiAtIFRoZSB2YWx1ZSB0byB0cmFuc2Zvcm0uXG5cdFx0ICogQHJldHVybnMgVGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuXHRcdCAqL1xuXHRcdHRyYW5zZm9ybT86ICh2OiBzdHJpbmcgfCBudWxsKSA9PiBUO1xuXHR9O1xuXG4vKipcbiAqIFRoZSBgaW5qZWN0Um91dGVGcmFnbWVudGAgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBhY2Nlc3MgYW5kIHRyYW5zZm9ybSB1cmwgZnJhZ21lbnQgZnJvbSB0aGUgY3VycmVudCByb3V0ZS5cbiAqXG4gKiBAcmV0dXJucyB7U2lnbmFsfSBBIGBTaWduYWxgIHRoYXQgZW1pdHMgdGhlIHJvdXRlIGZyYWdtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Um91dGVGcmFnbWVudCgpOiBTaWduYWw8c3RyaW5nIHwgbnVsbD47XG5cbi8qKlxuICogVGhlIGBpbmplY3RSb3V0ZUZyYWdtZW50YCBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIGFjY2VzcyBhbmQgdHJhbnNmb3JtIHVybCBmcmFnbWVudCBmcm9tIHRoZSBjdXJyZW50IHJvdXRlLlxuICpcbiAqIEBwYXJhbSB7SW5qZWN0Um91dGVGcmFnbWVudE9wdGlvbnN9IG9wdGlvbnMgLSBpbmplY3Qgb3B0aW9ucyBsaWtlIHRyYW5zZm9ybSBmbi5cbiAqIEByZXR1cm5zIHtTaWduYWx9IEEgYFNpZ25hbGAgdGhhdCBlbWl0cyB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgb2YgdXJsIGZyYWdtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Um91dGVGcmFnbWVudDxUPihcblx0b3B0aW9uczogSW5qZWN0Um91dGVGcmFnbWVudE9wdGlvbnM8VD4sXG4pOiBTaWduYWw8VD47XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RSb3V0ZUZyYWdtZW50PFQ+KFxuXHRvcHRpb25zPzogSW5qZWN0Um91dGVGcmFnbWVudE9wdGlvbnM8VD4sXG4pIHtcblx0cmV0dXJuIGFzc2VydEluamVjdG9yKGluamVjdFJvdXRlRnJhZ21lbnQsIG9wdGlvbnM/LmluamVjdG9yLCAoKSA9PiB7XG5cdFx0Y29uc3Qgcm91dGUgPSBpbmplY3QoQWN0aXZhdGVkUm91dGUpO1xuXHRcdGNvbnN0IGluaXRpYWxSb3V0ZUZyYWdtZW50ID0gcm91dGUuc25hcHNob3QuZnJhZ21lbnQ7XG5cdFx0Y29uc3QgZ2V0RnJhZ21lbnQgPSAoZnJhZ21lbnQ6IHN0cmluZyB8IG51bGwpID0+IHtcblx0XHRcdGlmIChmcmFnbWVudCA9PT0gbnVsbCAmJiBvcHRpb25zPy5kZWZhdWx0VmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdGlvbnM/LnBhcnNlKSB7XG5cdFx0XHRcdHJldHVybiBvcHRpb25zLnBhcnNlKGZyYWdtZW50KTtcblx0XHRcdH1cblx0XHRcdGlmIChvcHRpb25zPy50cmFuc2Zvcm0pIHtcblx0XHRcdFx0cmV0dXJuIG9wdGlvbnMudHJhbnNmb3JtKGZyYWdtZW50KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZyYWdtZW50O1xuXHRcdH07XG5cdFx0Y29uc3QgZnJhZ21lbnQkID0gcm91dGUuZnJhZ21lbnQucGlwZShtYXAoZ2V0RnJhZ21lbnQpKTtcblxuXHRcdHJldHVybiB0b1NpZ25hbChmcmFnbWVudCQsIHtcblx0XHRcdGluaXRpYWxWYWx1ZTogZ2V0RnJhZ21lbnQoaW5pdGlhbFJvdXRlRnJhZ21lbnQpLFxuXHRcdH0pO1xuXHR9KTtcbn1cbiJdfQ==