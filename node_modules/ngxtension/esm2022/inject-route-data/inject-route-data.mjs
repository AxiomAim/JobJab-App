import { inject } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ActivatedRoute } from '@angular/router';
import { assertInjector } from 'ngxtension/assert-injector';
import { map } from 'rxjs';
export function injectRouteData(keyOrTransform, options = {}) {
    return assertInjector(injectRouteData, options?.injector, () => {
        const route = inject(ActivatedRoute);
        const initialRouteData = route.snapshot.data || {};
        const { defaultValue } = options;
        if (!keyOrTransform) {
            return toSignal(route.data, { initialValue: initialRouteData });
        }
        if (typeof keyOrTransform === 'function') {
            return toSignal(route.data.pipe(map(keyOrTransform)), {
                initialValue: keyOrTransform(initialRouteData),
            });
        }
        const getDataParam = (data) => {
            const param = data?.[keyOrTransform];
            return param ?? defaultValue ?? null;
        };
        return toSignal(route.data.pipe(map(getDataParam)), {
            initialValue: getDataParam(initialRouteData),
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LXJvdXRlLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vaW5qZWN0LXJvdXRlLWRhdGEvc3JjL2luamVjdC1yb3V0ZS1kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFNUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQW1EM0IsTUFBTSxVQUFVLGVBQWUsQ0FDOUIsY0FBcUQsRUFDckQsVUFBK0IsRUFBRTtJQUVqQyxPQUFPLGNBQWMsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDOUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ25ELE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFakMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3JCLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7UUFFRCxJQUFJLE9BQU8sY0FBYyxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQzFDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFO2dCQUNyRCxZQUFZLEVBQUUsY0FBYyxDQUFDLGdCQUFnQixDQUFDO2FBQzlDLENBQUMsQ0FBQztRQUNKLENBQUM7UUFFRCxNQUFNLFlBQVksR0FBRyxDQUFDLElBQVUsRUFBRSxFQUFFO1lBQ25DLE1BQU0sS0FBSyxHQUFHLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBd0IsQ0FBQztZQUU1RCxPQUFPLEtBQUssSUFBSSxZQUFZLElBQUksSUFBSSxDQUFDO1FBQ3RDLENBQUMsQ0FBQztRQUVGLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFO1lBQ25ELFlBQVksRUFBRSxZQUFZLENBQUMsZ0JBQWdCLENBQUM7U0FDNUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCB0eXBlIFNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdG9TaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgdHlwZSBEYXRhIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGFzc2VydEluamVjdG9yIH0gZnJvbSAnbmd4dGVuc2lvbi9hc3NlcnQtaW5qZWN0b3InO1xuaW1wb3J0IHsgRGVmYXVsdFZhbHVlT3B0aW9ucywgSW5qZWN0b3JPcHRpb25zIH0gZnJvbSAnbmd4dGVuc2lvbi9zaGFyZWQnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcyc7XG5cbnR5cGUgUm91dGVEYXRhVHJhbnNmb3JtRm48VD4gPSAoZGF0YTogRGF0YSkgPT4gVDtcblxuLyoqXG4gKiBUaGUgYFJvdXRlRGF0YU9wdGlvbnNgIHR5cGUgZGVmaW5lcyBvcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgYmVoYXZpb3Igb2YgdGhlIGBpbmplY3RSb3V0ZURhdGFgIGZ1bmN0aW9uLlxuICpcbiAqIEB0ZW1wbGF0ZSBSZWFkVCAtIFRoZSBleHBlY3RlZCB0eXBlIG9mIHRoZSByZWFkIHZhbHVlLlxuICogQHRlbXBsYXRlIFdyaXRlVCAtIFRoZSB0eXBlIG9mIHRoZSB2YWx1ZSB0byBiZSB3cml0dGVuLlxuICogQHRlbXBsYXRlIERlZmF1bHRWYWx1ZVQgLSBUaGUgdHlwZSBvZiB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAqL1xuZXhwb3J0IHR5cGUgUm91dGVEYXRhT3B0aW9uczxEZWZhdWx0VmFsdWVUPiA9XG5cdERlZmF1bHRWYWx1ZU9wdGlvbnM8RGVmYXVsdFZhbHVlVD4gJiBJbmplY3Rvck9wdGlvbnM7XG5cbi8qKlxuICogVGhlIGBpbmplY3RSb3V0ZURhdGFgIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gYWNjZXNzIGFuZCBtYW5pcHVsYXRlIHJvdXRlIGRhdGEgZnJvbSB0aGUgY3VycmVudCByb3V0ZS5cbiAqXG4gKiBAcmV0dXJucyBBIGBTaWduYWxgIHRoYXQgZW1pdHMgdGhlIGVudGlyZSBkYXRhIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJvdXRlRGF0YSgpOiBTaWduYWw8RGF0YT47XG5cbi8qKlxuICogVGhlIGBpbmplY3RSb3V0ZURhdGFgIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gYWNjZXNzIGFuZCBtYW5pcHVsYXRlIHJvdXRlIGRhdGEgZnJvbSB0aGUgY3VycmVudCByb3V0ZS5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSBleHBlY3RlZCB0eXBlIG9mIHRoZSByZWFkIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBuYW1lIG9mIHRoZSByb3V0ZSBkYXRhIHRvIHJldHJpZXZlLlxuICogQHBhcmFtIHtSb3V0ZURhdGFPcHRpb25zfSBvcHRpb25zIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgcm91dGUgZGF0YS5cbiAqIEByZXR1cm5zIHtTaWduYWx9IEEgYFNpZ25hbGAgdGhhdCBlbWl0cyB0aGUgdmFsdWUgb2YgdGhlIHNwZWNpZmllZCByb3V0ZSBkYXRhLCBvciBgbnVsbGAgaWYgaXQncyBub3QgcHJlc2VudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJvdXRlRGF0YTxUPihcblx0a2V5OiBrZXlvZiBEYXRhLFxuXHRvcHRpb25zPzogUm91dGVEYXRhT3B0aW9uczxUPixcbik6IFNpZ25hbDxUIHwgbnVsbD47XG5cbi8qKlxuICogVGhlIGBpbmplY3RSb3V0ZURhdGFgIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gYWNjZXNzIGFuZCBtYW5pcHVsYXRlIHJvdXRlIGRhdGEgZnJvbSB0aGUgY3VycmVudCByb3V0ZS5cbiAqIEl0IHJldHJpZXZlcyB0aGUgdmFsdWUgb2YgdGhlIHJvdXRlIGRhdGEgYmFzZWQgb24gYSBjdXN0b20gdHJhbnNmb3JtIGZ1bmN0aW9uIGFwcGxpZWQgdG8gdGhlIHJvdXRlIGRhdGEgb2JqZWN0LlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIGV4cGVjdGVkIHR5cGUgb2YgdGhlIHJlYWQgdmFsdWUuXG4gKiBAcGFyYW0ge1JvdXRlRGF0YVRyYW5zZm9ybUZuPFQ+fSBmbiAtIEEgdHJhbnNmb3JtIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHJvdXRlIGRhdGEgb2JqZWN0IGFuZCByZXR1cm5zIHRoZSBkZXNpcmVkIHZhbHVlLlxuICogQHBhcmFtIHtSb3V0ZURhdGFPcHRpb25zfSBvcHRpb25zIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgcm91dGUgZGF0YS5cbiAqIEByZXR1cm5zIHtTaWduYWw8VD59IEEgYFNpZ25hbGAgdGhhdCBlbWl0cyB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGN1c3RvbSB0cmFuc2Zvcm0gZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHNlYXJjaFZhbHVlID0gaW5qZWN0Um91dGVEYXRhKChkYXRhKSA9PiBkYXRhWydzZWFyY2gnXSBhcyBzdHJpbmcpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Um91dGVEYXRhPFJlYWRUPihcblx0Zm46IFJvdXRlRGF0YVRyYW5zZm9ybUZuPFJlYWRUPixcblx0b3B0aW9ucz86IFJvdXRlRGF0YU9wdGlvbnM8UmVhZFQ+LFxuKTogU2lnbmFsPFJlYWRUPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJvdXRlRGF0YTxUPihcblx0a2V5T3JUcmFuc2Zvcm0/OiBrZXlvZiBEYXRhIHwgUm91dGVEYXRhVHJhbnNmb3JtRm48VD4sXG5cdG9wdGlvbnM6IFJvdXRlRGF0YU9wdGlvbnM8VD4gPSB7fSxcbikge1xuXHRyZXR1cm4gYXNzZXJ0SW5qZWN0b3IoaW5qZWN0Um91dGVEYXRhLCBvcHRpb25zPy5pbmplY3RvciwgKCkgPT4ge1xuXHRcdGNvbnN0IHJvdXRlID0gaW5qZWN0KEFjdGl2YXRlZFJvdXRlKTtcblx0XHRjb25zdCBpbml0aWFsUm91dGVEYXRhID0gcm91dGUuc25hcHNob3QuZGF0YSB8fCB7fTtcblx0XHRjb25zdCB7IGRlZmF1bHRWYWx1ZSB9ID0gb3B0aW9ucztcblxuXHRcdGlmICgha2V5T3JUcmFuc2Zvcm0pIHtcblx0XHRcdHJldHVybiB0b1NpZ25hbChyb3V0ZS5kYXRhLCB7IGluaXRpYWxWYWx1ZTogaW5pdGlhbFJvdXRlRGF0YSB9KTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIGtleU9yVHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZXR1cm4gdG9TaWduYWwocm91dGUuZGF0YS5waXBlKG1hcChrZXlPclRyYW5zZm9ybSkpLCB7XG5cdFx0XHRcdGluaXRpYWxWYWx1ZToga2V5T3JUcmFuc2Zvcm0oaW5pdGlhbFJvdXRlRGF0YSksXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRjb25zdCBnZXREYXRhUGFyYW0gPSAoZGF0YTogRGF0YSkgPT4ge1xuXHRcdFx0Y29uc3QgcGFyYW0gPSBkYXRhPy5ba2V5T3JUcmFuc2Zvcm1dIGFzIHVua25vd24gfCB1bmRlZmluZWQ7XG5cblx0XHRcdHJldHVybiBwYXJhbSA/PyBkZWZhdWx0VmFsdWUgPz8gbnVsbDtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRvU2lnbmFsKHJvdXRlLmRhdGEucGlwZShtYXAoZ2V0RGF0YVBhcmFtKSksIHtcblx0XHRcdGluaXRpYWxWYWx1ZTogZ2V0RGF0YVBhcmFtKGluaXRpYWxSb3V0ZURhdGEpLFxuXHRcdH0pO1xuXHR9KTtcbn1cbiJdfQ==