import * as i0 from "@angular/core";
export declare class TextSelectionService {
    readonly window: Window & typeof globalThis;
    readonly listeners: import("@angular/core").WritableSignal<number>;
    readonly selection: import("@angular/core").WritableSignal<Selection | null>;
    readonly text: import("@angular/core").Signal<string | undefined>;
    readonly ranges: import("@angular/core").Signal<Range[]>;
    readonly rects: import("@angular/core").Signal<DOMRect[]>;
    private isListening;
    constructor();
    /**
     * Clears the selection. This is a convenience method for `window.getSelection().empty()`.
     */
    resetSelection(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TextSelectionService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TextSelectionService>;
}
/**
 * Creates reactive signals for text selection.
 *
 * Example:
 * ```ts
 * const selection = injectTextSelection();
 *
 * selection.text() // returns the selected text
 * selection.rects() // returns an array of bounding rects for each selection range
 * selection.ranges() // returns an array of Range objects for each selection range
 * selection.selection() // returns the Selection object
 * selection.clearSelection() // clears the selection
 * ```
 *
 * @returns An object with signals for the selected text, selection ranges, rects, and the raw selection.
 */
export declare function injectTextSelection(): {
    text: import("@angular/core").Signal<string | undefined>;
    rects: import("@angular/core").Signal<DOMRect[]>;
    ranges: import("@angular/core").Signal<Range[]>;
    selection: import("@angular/core").Signal<Selection | null>;
    clearSelection: () => void;
};
