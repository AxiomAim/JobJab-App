{"version":3,"file":"ngxtension-inject-route-data.mjs","sources":["../../../../libs/ngxtension/inject-route-data/src/inject-route-data.ts","../../../../libs/ngxtension/inject-route-data/src/ngxtension-inject-route-data.ts"],"sourcesContent":["import { inject, type Signal } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { ActivatedRoute, type Data } from '@angular/router';\nimport { assertInjector } from 'ngxtension/assert-injector';\nimport { DefaultValueOptions, InjectorOptions } from 'ngxtension/shared';\nimport { map } from 'rxjs';\n\ntype RouteDataTransformFn<T> = (data: Data) => T;\n\n/**\n * The `RouteDataOptions` type defines options for configuring the behavior of the `injectRouteData` function.\n *\n * @template ReadT - The expected type of the read value.\n * @template WriteT - The type of the value to be written.\n * @template DefaultValueT - The type of the default value.\n */\nexport type RouteDataOptions<DefaultValueT> =\n\tDefaultValueOptions<DefaultValueT> & InjectorOptions;\n\n/**\n * The `injectRouteData` function allows you to access and manipulate route data from the current route.\n *\n * @returns A `Signal` that emits the entire data object.\n */\nexport function injectRouteData(): Signal<Data>;\n\n/**\n * The `injectRouteData` function allows you to access and manipulate route data from the current route.\n *\n * @template T - The expected type of the read value.\n * @param {string} key - The name of the route data to retrieve.\n * @param {RouteDataOptions} options - Optional configuration options for the route data.\n * @returns {Signal} A `Signal` that emits the value of the specified route data, or `null` if it's not present.\n */\nexport function injectRouteData<T>(\n\tkey: keyof Data,\n\toptions?: RouteDataOptions<T>,\n): Signal<T | null>;\n\n/**\n * The `injectRouteData` function allows you to access and manipulate route data from the current route.\n * It retrieves the value of the route data based on a custom transform function applied to the route data object.\n *\n * @template T - The expected type of the read value.\n * @param {RouteDataTransformFn<T>} fn - A transform function that takes the route data object and returns the desired value.\n * @param {RouteDataOptions} options - Optional configuration options for the route data.\n * @returns {Signal<T>} A `Signal` that emits the transformed value based on the provided custom transform function.\n *\n * @example\n * const searchValue = injectRouteData((data) => data['search'] as string);\n */\nexport function injectRouteData<ReadT>(\n\tfn: RouteDataTransformFn<ReadT>,\n\toptions?: RouteDataOptions<ReadT>,\n): Signal<ReadT>;\n\nexport function injectRouteData<T>(\n\tkeyOrTransform?: keyof Data | RouteDataTransformFn<T>,\n\toptions: RouteDataOptions<T> = {},\n) {\n\treturn assertInjector(injectRouteData, options?.injector, () => {\n\t\tconst route = inject(ActivatedRoute);\n\t\tconst initialRouteData = route.snapshot.data || {};\n\t\tconst { defaultValue } = options;\n\n\t\tif (!keyOrTransform) {\n\t\t\treturn toSignal(route.data, { initialValue: initialRouteData });\n\t\t}\n\n\t\tif (typeof keyOrTransform === 'function') {\n\t\t\treturn toSignal(route.data.pipe(map(keyOrTransform)), {\n\t\t\t\tinitialValue: keyOrTransform(initialRouteData),\n\t\t\t});\n\t\t}\n\n\t\tconst getDataParam = (data: Data) => {\n\t\t\tconst param = data?.[keyOrTransform] as unknown | undefined;\n\n\t\t\treturn param ?? defaultValue ?? null;\n\t\t};\n\n\t\treturn toSignal(route.data.pipe(map(getDataParam)), {\n\t\t\tinitialValue: getDataParam(initialRouteData),\n\t\t});\n\t});\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;SAwDgB,eAAe,CAC9B,cAAqD,EACrD,UAA+B,EAAE,EAAA;IAEjC,OAAO,cAAc,CAAC,eAAe,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAK;AAC9D,QAAA,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;QACrC,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;AACnD,QAAA,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;QAEjC,IAAI,CAAC,cAAc,EAAE;AACpB,YAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,gBAAgB,EAAE,CAAC,CAAC;SAChE;AAED,QAAA,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;AACzC,YAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE;AACrD,gBAAA,YAAY,EAAE,cAAc,CAAC,gBAAgB,CAAC;AAC9C,aAAA,CAAC,CAAC;SACH;AAED,QAAA,MAAM,YAAY,GAAG,CAAC,IAAU,KAAI;AACnC,YAAA,MAAM,KAAK,GAAG,IAAI,GAAG,cAAc,CAAwB,CAAC;AAE5D,YAAA,OAAO,KAAK,IAAI,YAAY,IAAI,IAAI,CAAC;AACtC,SAAC,CAAC;AAEF,QAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE;AACnD,YAAA,YAAY,EAAE,YAAY,CAAC,gBAAgB,CAAC;AAC5C,SAAA,CAAC,CAAC;AACJ,KAAC,CAAC,CAAC;AACJ;;ACrFA;;AAEG;;;;"}