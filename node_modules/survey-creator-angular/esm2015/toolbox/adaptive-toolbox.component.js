import { Component, Input, ViewChild } from "@angular/core";
import { VerticalResponsivityManager } from "survey-core";
import { AngularComponentFactory, BaseAngular } from "survey-angular-ui";
import * as i0 from "@angular/core";
import * as i1 from "./toolbox-tool.component";
import * as i2 from "../components/search.component";
import * as i3 from "../components/scroll.component";
import * as i4 from "./toolbox-category.component";
import * as i5 from "@angular/common";
export class AdaptiveToolboxComponent extends BaseAngular {
    get toolbox() {
        return this.model.toolbox;
    }
    get creator() {
        return this.model;
    }
    get searchItem() {
        return this.toolbox.searchItem;
    }
    ngAfterViewInit() {
        this.toolbox.setRootElement(this.container.nativeElement);
        this.responsivityManager =
            new VerticalResponsivityManager(this.toolbox.containerElement, this.toolbox);
    }
    getModel() {
        return this.toolbox;
    }
    ngOnDestroy() {
        var _a;
        (_a = this.responsivityManager) === null || _a === void 0 ? void 0 : _a.dispose();
        this.toolbox.setRootElement(undefined);
        super.ngOnDestroy();
    }
    trackItemBy(_, item) {
        return item.renderedId;
    }
}
AdaptiveToolboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AdaptiveToolboxComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
AdaptiveToolboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AdaptiveToolboxComponent, selector: "svc-toolbox", inputs: { model: "model" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <div [class]=\"toolbox.classNames\" #container>\n    <div (focusout)=\"toolbox.focusOut($event)\" class=\"svc-toolbox__panel\">\n      <div *ngIf=\"toolbox.showSearch\" class=\"svc-toolbox__search-container\">\n        <ng-container *ngIf=\"toolbox.isCompactRendered\">\n          <svc-toolbox-tool [creator]=\"creator\" [item]=\"searchItem\" [parentModel]=\"toolbox\"\n            [isCompact]=\"toolbox.isCompactRendered\"></svc-toolbox-tool>\n        </ng-container>\n        <svc-search [model]=\"toolbox.searchManager\"></svc-search>\n        <div class=\"svc-toolbox__category-separator svc-toolbox__category-separator--search\"></div>\n      </div>\n      <div *ngIf=\"toolbox.showPlaceholder\" class=\"svc-toolbox__placeholder\">{{toolbox.toolboxNoResultsFound}}</div>\n      <svc-scroll>\n        <ng-container *ngIf=\"!toolbox.showInSingleCategory\">\n          <svc-toolbox-category *ngFor=\"let category of toolbox.categories\" [category]=\"category\"\n            [toolbox]=\"toolbox\"></svc-toolbox-category>\n        </ng-container>\n        <ng-container *ngIf=\"toolbox.showInSingleCategory\">\n          <div class=\"svc-toolbox__category\">\n            <ng-container *ngFor=\"let item of toolbox.renderedActions;  trackBy: trackItemBy\">\n              <svc-toolbox-tool [creator]=\"creator\" [item]=\"item\" [parentModel]=\"toolbox\"\n                [isCompact]=\"toolbox.isCompactRendered\"></svc-toolbox-tool>\n            </ng-container>\n          </div>\n        </ng-container>\n      </svc-scroll>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1.ToolboxToolComponent, selector: "svc-toolbox-tool", inputs: ["creator", "item", "parentModel", "isCompact"] }, { type: i2.SearchComponent, selector: "svc-search", inputs: ["model"] }, { type: i3.ScrollComponent, selector: "svc-scroll" }, { type: i4.ToolboxCategoryComponent, selector: "svc-toolbox-category ", inputs: ["category", "toolbox"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AdaptiveToolboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "svc-toolbox",
                    templateUrl: "./adaptive-toolbox.component.html",
                    styles: [":host { display: none; }"]
                }]
        }], propDecorators: { model: [{
                type: Input
            }], container: [{
                type: ViewChild,
                args: ["container"]
            }] } });
AngularComponentFactory.Instance.registerComponent("svc-toolbox", AdaptiveToolboxComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRpdmUtdG9vbGJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdG9vbGJveC9hZGFwdGl2ZS10b29sYm94LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3NyYy90b29sYm94L2FkYXB0aXZlLXRvb2xib3guY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWMsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RixPQUFPLEVBQVUsMkJBQTJCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7Ozs7O0FBT3pFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxXQUE0QjtJQUl4RSxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFvQixDQUFDO0lBQzNDLENBQUM7SUFDRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUErQixDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLG1CQUFtQjtZQUNwQixJQUFJLDJCQUEyQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWtDLEVBQzdFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQ1MsUUFBUTtRQUNoQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUNRLFdBQVc7O1FBQ2xCLE1BQUEsSUFBSSxDQUFDLG1CQUFtQiwwQ0FBRSxPQUFPLEVBQUUsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFnQixDQUFDLENBQUM7UUFDOUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDRCxXQUFXLENBQUMsQ0FBUyxFQUFFLElBQXlCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDOztzSEE3QlUsd0JBQXdCOzBHQUF4Qix3QkFBd0IsOE1DVnJDLHdqREE0QmM7NEZEbEJELHdCQUF3QjtrQkFMcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsV0FBVyxFQUFFLG1DQUFtQztvQkFDaEQsTUFBTSxFQUFFLENBQUMsMEJBQTBCLENBQUM7aUJBQ3JDOzhCQUVVLEtBQUs7c0JBQWIsS0FBSztnQkFDa0IsU0FBUztzQkFBaEMsU0FBUzt1QkFBQyxXQUFXOztBQTZCeEIsdUJBQXVCLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN1cnZleUNyZWF0b3JNb2RlbCwgUXVlc3Rpb25Ub29sYm94LCBRdWVzdGlvblRvb2xib3hJdGVtIH0gZnJvbSBcInN1cnZleS1jcmVhdG9yLWNvcmVcIjtcbmltcG9ydCB7IEFjdGlvbiwgVmVydGljYWxSZXNwb25zaXZpdHlNYW5hZ2VyIH0gZnJvbSBcInN1cnZleS1jb3JlXCI7XG5pbXBvcnQgeyBBbmd1bGFyQ29tcG9uZW50RmFjdG9yeSwgQmFzZUFuZ3VsYXIgfSBmcm9tIFwic3VydmV5LWFuZ3VsYXItdWlcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcInN2Yy10b29sYm94XCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vYWRhcHRpdmUtdG9vbGJveC5jb21wb25lbnQuaHRtbFwiLFxuICBzdHlsZXM6IFtcIjpob3N0IHsgZGlzcGxheTogbm9uZTsgfVwiXVxufSlcbmV4cG9ydCBjbGFzcyBBZGFwdGl2ZVRvb2xib3hDb21wb25lbnQgZXh0ZW5kcyBCYXNlQW5ndWxhcjxRdWVzdGlvblRvb2xib3g+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBJbnB1dCgpIG1vZGVsITogU3VydmV5Q3JlYXRvck1vZGVsO1xuICBAVmlld0NoaWxkKFwiY29udGFpbmVyXCIpIGNvbnRhaW5lciE6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICBwcml2YXRlIHJlc3BvbnNpdml0eU1hbmFnZXI6IFZlcnRpY2FsUmVzcG9uc2l2aXR5TWFuYWdlciB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGdldCB0b29sYm94KCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVsLnRvb2xib3g7XG4gIH1cbiAgcHVibGljIGdldCBjcmVhdG9yKCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVsO1xuICB9XG4gIHB1YmxpYyBnZXQgc2VhcmNoSXRlbSgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sYm94LnNlYXJjaEl0ZW0gYXMgQWN0aW9uO1xuICB9XG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnRvb2xib3guc2V0Um9vdEVsZW1lbnQodGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudCBhcyBIVE1MRGl2RWxlbWVudCk7XG4gICAgdGhpcy5yZXNwb25zaXZpdHlNYW5hZ2VyID1cbiAgICAgICAgbmV3IFZlcnRpY2FsUmVzcG9uc2l2aXR5TWFuYWdlcih0aGlzLnRvb2xib3guY29udGFpbmVyRWxlbWVudCBhcyBIVE1MRGl2RWxlbWVudCxcbiAgICAgICAgICB0aGlzLnRvb2xib3gpO1xuICB9XG4gIHByb3RlY3RlZCBnZXRNb2RlbCgpOiBRdWVzdGlvblRvb2xib3gge1xuICAgIHJldHVybiB0aGlzLnRvb2xib3g7XG4gIH1cbiAgb3ZlcnJpZGUgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5yZXNwb25zaXZpdHlNYW5hZ2VyPy5kaXNwb3NlKCk7XG4gICAgdGhpcy50b29sYm94LnNldFJvb3RFbGVtZW50KHVuZGVmaW5lZCBhcyBhbnkpO1xuICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XG4gIH1cbiAgdHJhY2tJdGVtQnkoXzogbnVtYmVyLCBpdGVtOiBRdWVzdGlvblRvb2xib3hJdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0ucmVuZGVyZWRJZDtcbiAgfVxufVxuQW5ndWxhckNvbXBvbmVudEZhY3RvcnkuSW5zdGFuY2UucmVnaXN0ZXJDb21wb25lbnQoXCJzdmMtdG9vbGJveFwiLCBBZGFwdGl2ZVRvb2xib3hDb21wb25lbnQpOyIsIjxuZy10ZW1wbGF0ZSAjdGVtcGxhdGU+XG4gIDxkaXYgW2NsYXNzXT1cInRvb2xib3guY2xhc3NOYW1lc1wiICNjb250YWluZXI+XG4gICAgPGRpdiAoZm9jdXNvdXQpPVwidG9vbGJveC5mb2N1c091dCgkZXZlbnQpXCIgY2xhc3M9XCJzdmMtdG9vbGJveF9fcGFuZWxcIj5cbiAgICAgIDxkaXYgKm5nSWY9XCJ0b29sYm94LnNob3dTZWFyY2hcIiBjbGFzcz1cInN2Yy10b29sYm94X19zZWFyY2gtY29udGFpbmVyXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0b29sYm94LmlzQ29tcGFjdFJlbmRlcmVkXCI+XG4gICAgICAgICAgPHN2Yy10b29sYm94LXRvb2wgW2NyZWF0b3JdPVwiY3JlYXRvclwiIFtpdGVtXT1cInNlYXJjaEl0ZW1cIiBbcGFyZW50TW9kZWxdPVwidG9vbGJveFwiXG4gICAgICAgICAgICBbaXNDb21wYWN0XT1cInRvb2xib3guaXNDb21wYWN0UmVuZGVyZWRcIj48L3N2Yy10b29sYm94LXRvb2w+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8c3ZjLXNlYXJjaCBbbW9kZWxdPVwidG9vbGJveC5zZWFyY2hNYW5hZ2VyXCI+PC9zdmMtc2VhcmNoPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3ZjLXRvb2xib3hfX2NhdGVnb3J5LXNlcGFyYXRvciBzdmMtdG9vbGJveF9fY2F0ZWdvcnktc2VwYXJhdG9yLS1zZWFyY2hcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiAqbmdJZj1cInRvb2xib3guc2hvd1BsYWNlaG9sZGVyXCIgY2xhc3M9XCJzdmMtdG9vbGJveF9fcGxhY2Vob2xkZXJcIj57e3Rvb2xib3gudG9vbGJveE5vUmVzdWx0c0ZvdW5kfX08L2Rpdj5cbiAgICAgIDxzdmMtc2Nyb2xsPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIXRvb2xib3guc2hvd0luU2luZ2xlQ2F0ZWdvcnlcIj5cbiAgICAgICAgICA8c3ZjLXRvb2xib3gtY2F0ZWdvcnkgKm5nRm9yPVwibGV0IGNhdGVnb3J5IG9mIHRvb2xib3guY2F0ZWdvcmllc1wiIFtjYXRlZ29yeV09XCJjYXRlZ29yeVwiXG4gICAgICAgICAgICBbdG9vbGJveF09XCJ0b29sYm94XCI+PC9zdmMtdG9vbGJveC1jYXRlZ29yeT5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0b29sYm94LnNob3dJblNpbmdsZUNhdGVnb3J5XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN2Yy10b29sYm94X19jYXRlZ29yeVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbSBvZiB0b29sYm94LnJlbmRlcmVkQWN0aW9uczsgIHRyYWNrQnk6IHRyYWNrSXRlbUJ5XCI+XG4gICAgICAgICAgICAgIDxzdmMtdG9vbGJveC10b29sIFtjcmVhdG9yXT1cImNyZWF0b3JcIiBbaXRlbV09XCJpdGVtXCIgW3BhcmVudE1vZGVsXT1cInRvb2xib3hcIlxuICAgICAgICAgICAgICAgIFtpc0NvbXBhY3RdPVwidG9vbGJveC5pc0NvbXBhY3RSZW5kZXJlZFwiPjwvc3ZjLXRvb2xib3gtdG9vbD5cbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvc3ZjLXNjcm9sbD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L25nLXRlbXBsYXRlPiJdfQ==